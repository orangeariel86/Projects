import random

#make a normal list for making a randmized one
verynormallist = [0, 1, 2, 3, 4, 5, 6, 7, 8]
#a reference for the distance to each cities
distancereference = [[0, 2, 11, 3, 18, 14, 20, 12, 5],
            [2, 0, 13, 10, 5, 3, 8, 20, 17],
            [11, 13, 0, 5, 19, 21, 2, 5, 8],
            [3, 10, 5, 0, 6, 4, 12, 15, 1],
            [18, 5, 19, 6, 0, 12, 6, 9, 7],
            [14, 3, 21, 4, 12, 0, 19, 7, 4],
            [20, 8, 2, 12, 6, 19, 0, 21, 13],
            [12, 20, 5, 15, 9, 7, 21, 0, 6],
            [5, 17, 8, 1, 7, 4, 13, 6, 0]]
#empty population list for making a population later
population = []
#empty list of the total distance for each state in the population that will be calculated later
eachdistanceinpopulation = []

#a function that is making a population for start (x = the normal list, y = the population)
def makepopulation(x,y,z):
    for i in range (z): 
        j = random.sample(x, len(x))
        y.append(j)

#calculating the total distance in every states in the population (x = the chosen state in the population, y = eachdistanceinpopulation)
def FITNESS_FUN(x, y):

    total_distance_in_population = 0
    for i in y:
        total_distance_in_population += i
    h = total_distance_in_population
    j = y[x]
    return h/j *100

#randomly choose which states to be the parent(x = population, y =eachdistanceinpopulation)
def RANDOM_SELECTION(x, y):
    counter = 0
    while (True):
        index = random.randint(1, (len(x)-1))
        fitness = FITNESS_FUN(index, y)
        counter+=1
        if (fitness < random.randint(0, 20)):
            return population[index]
        elif (counter == 10):
            return population[index]
        
#take parents and make a child state
def REPRODUCE(x,y):
    z = []
    w = []
    for i in range(3):
        z.append(x[i])
    for i in range(3, 7):
        z.append(y[i])
    for i in range(7, 9):
        z.append(x[i])
    for i in z:
        if i not in w:
            w.append(i)
    for i in range(9):
        if i not in w:
            w.append(i)
    return w

#swap index 0 to 4 to 5 to 8
def MUTATE(x):
    y = []
    for i in range(5, 9):
        y.append(x[i])
    for i in range(0, 5):
        y.append(x[i])
    return y


def GENETIC_ALGORITHM (population, eachdistanceinpopulation):
    for i in range (100):
        new_population = []
        eachdistanceinpopulation = []
        for i in population:
            sum_of_distance_of_states = 0
            for j in range (0, 8):
                sum_of_distance_of_states += distancereference[i[j]][i[j+1]]
            eachdistanceinpopulation.append(sum_of_distance_of_states)
        for i in range(1, (len(population)+1)):
            x = RANDOM_SELECTION(population, eachdistanceinpopulation)
            y = RANDOM_SELECTION(population, eachdistanceinpopulation)
            child = REPRODUCE(x,y)
            if (random.randint(0,1) == 1):
                child = MUTATE(child)
            new_population.append(child)
        population = new_population
    eachdistanceinpopulation = []
    for i in population:
        sum_of_distance_of_states = 0
        for j in range (0, 8):
            sum_of_distance_of_states += distancereference[i[j]][i[j+1]]
        eachdistanceinpopulation.append(sum_of_distance_of_states)
    index = eachdistanceinpopulation.index(min(eachdistanceinpopulation))
    return population[index], eachdistanceinpopulation[index]


   
#make the population
makepopulation(verynormallist, population, 250)
#print out the result from the function
x, y= GENETIC_ALGORITHM(population, eachdistanceinpopulation)
#explain the result
print("The best result is: ", end = "")
n = 0
for i in range(0,9):
    if (i<8):
        print(str(x[i]) + " -> ", end = "")
    else:
        print(str(x[i]), end = "\n")
print("The distance is: " + str(y))

"""
